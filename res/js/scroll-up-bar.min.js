/*jQuery(function(){
	var addhomespHeight = parseInt(jQuery("#addhome_sp").css('height'));
	var addhomeSp    = jQuery("#addhome_sp");
	var addhomeSphead = addhomeSp.offset().top + addhomespHeight;
	jQuery(window).scroll(function () {
		if(jQuery(window).scrollTop() >= addhomeSphead) {
				jQuery("#addhome_sp ").css("display", "none");
		}
	});
});
*/
jQuery(function(){
	jQuery("#addhome_sp").css({opacity:'0'});
	var ua = navigator.userAgent;
	if (ua.indexOf('iPhone') != -1) {
		jQuery(function(){
			jQuery("#addhome_sp .hidden-menu p#addtxt").text("下のボタンから「ホーム画面に追加」すると、次から簡単に「ハルメク 通販サイト」をご利用いただけます！");
			jQuery("#addhome_sp span.try").css("display","block");
		setTimeout(function(){
			 jQuery("#addhome_sp").animate({'position': 'fixed','bottom':'-38px',opacity: 1,}, { duration: 1300, queue: false });
		},1500);
	});
	}else{
		jQuery(function(){
			jQuery("#addhome_sp").css("bottom","70px");
			jQuery("#addhome_sp .hidden-menu p#addtxt").text("「ブックマーク」すると、次から簡単に「ハルメク 通販サイト」をご利用いただけます！");
			jQuery("#addhome_sp span.try").css("display","none");
		setTimeout(function(){
			 jQuery("#addhome_sp").animate({'position': 'fixed','bottom':'20px',opacity: 1,}, { duration: 1300, queue: false });
		},1500);
	});
	}
});

(function($) {
	'use strict';
	var topbar    = jQuery("#topbar_sp");
	var _destroyFn;

	jQuery.scrollupbar = function($bar, options) {
	// Default options
	options = jQuery.extend({
		enterViewport: jQuery.noop,
		fullyEnterViewport: jQuery.noop,
		exitViewport: jQuery.noop,
		partiallyExitViewport: jQuery.noop
	}, options);

	function isFullyInViewport() {
		return $window.scrollTop() <= $bar.offset().top;
	}

	function isInViewport() {
		return $window.scrollTop() < $bar.offset().top + $bar.outerHeight();
	}

	var $window = jQuery(window),
	$document = jQuery(document),
	minY = $bar.css('position') == 'fixed' ? 0 : $bar.offset().top,
	lastY = $window.scrollTop(), // Use last Y to detect scroll direction.
	initialPosTop = $bar.position().top,
	iOS = /(ikiiki)/g.test(navigator.userAgent),
	timeout;
	var minyHeitSize = jQuery('#largeHeader_sp').height();
	var showPcview = jQuery('#change_view_top_sp').height();
	var importantNotifysp = jQuery('#important-notify_sp').height();
	jQuery.scrollupbar.isInViewport = isInViewport();
	jQuery.scrollupbar.isFullyInViewport = isFullyInViewport();

	// iOS can't handle momentum scroll properly (See discussion on
	// http://stackoverflow.com/questions/2863547).
	if (!iOS) {
		$window.on('scroll.scrollupbar', function() {

			var y = $window.scrollTop(),
			barHeight = $bar.outerHeight(); //95
			var thisHight = (barHeight + showPcview + importantNotifysp);
			//var thisHight = (barHeight + importantNotifysp);
			//console.log(minY); = 75
			// Ignore elastic scrolling.
			//一番上、または下にスクロールしたら
			/*if (y < thisHight || y > ($document.height() - $window.height())) {*/
			if (y < thisHight) {

				jQuery("#topbar_sp + #shopNav_wrapper_sp").css("padding-top", "0");
				$bar.css({
					'position': 'static',
				});
			return;
			}

			// Cancel the event fired by the previous scroll.
			if (timeout) {
				clearTimeout(timeout);
			}

			if (y < lastY) { // Scrolling up
				//上にスクロールしたら
				// If the bar is hidden, place it right above the top frame.
				if (jQuery.scrollupbar.isInViewport && lastY - barHeight >= minY) {
					$bar.css('top', (lastY - barHeight) - 100);
					jQuery.scrollupbar.isInViewport = true;
					options.enterViewport();
				}
			// Scrolls up bigger than the bar's height fixes the bar on top.
			if (isFullyInViewport()) {
				if (y >= thisHight) {
				jQuery("#topbar_sp + #shopNav_wrapper_sp").css("padding-top", barHeight +"px");
					$bar.css({
						'position': 'fixed',
						'top': 0
					});
				} else{
					jQuery("#topbar_sp + #shopNav_wrapper_sp").css("padding-top", "0");
					$bar.css({
						'position': 'static'
						//'top': '100px'
					});
				}
				if (!jQuery.scrollupbar.isFullyInViewport) {
					jQuery.scrollupbar.isFullyInViewport = true;
					options.fullyEnterViewport();
				}
			}

			// Fire an event to reveal the entire bar after 400ms if the scroll
			// wasn't big enough.
			timeout = setTimeout(function() {
				if (!isFullyInViewport()) {
					var barPosition = $document.height();
					//console.log(barPosition);
					$bar.css({
						'position': 'fixed',
						'top': -barPosition + "px"
					});
					$bar.animate({'top': 0}, 400, function() {
						jQuery.scrollupbar.isFullyInViewport = true;
						options.fullyEnterViewport();
					});
				} 
			}, 100);
				} else if (y > (lastY + 10)) { // Scrolling down
					// Unfix the bar allowing it to scroll with the page.
					if (jQuery.scrollupbar.isFullyInViewport) {
						var change_view_top_sp = jQuery('#change_view_top_sp').outerHeight(true);
						var brandNav_spheight = jQuery('#important-notify_sp').outerHeight(true);
						$bar.css({
							'position': 'absolute',
							'top': brandNav_spheight + change_view_top_sp
						});
						jQuery("#topbar_sp + #shopNav_wrapper_sp").css("padding-top", barHeight +"px");
						jQuery("#addhome_sp ").slideUp(400, 'swing');
						if (!isFullyInViewport()) {
							$bar.css({
								'position': 'absolute',
								'top': lastY > minY ? lastY : initialPosTop
							});
							jQuery(function(){
								jQuery("#slideBoxsearch_sp").slideUp(100, 'swing');
							});
							jQuery.scrollupbar.isFullyInViewport = false;
							options.partiallyExitViewport();
						}
					}

					if (jQuery.scrollupbar.isInViewport && !isInViewport()) {
						jQuery.scrollupbar.isInViewport = false;
						options.exitViewport();
					}

					// Fire an event to hide the entire bar after 400ms if the scroll
					// wasn't big enough.
					timeout = setTimeout(function() {
						if (isInViewport() && y - barHeight >= minY) {

							$bar.animate({'top': y - barHeight}, 400, function() {
							jQuery.scrollupbar.isInViewport = false;
							options.exitViewport();
						});
					}
				}, 400);
			}
		lastY = y;
	});
	} else { // Fallback simplified behaviour for iOS.
      $window.on('touchstart.scrollupbar', function () {
        lastY = $window.scrollTop();
      });

      $window.on('touchend.scrollupbar', function () {
        var y = $window.scrollTop();

        if (y < lastY || y - $bar.outerHeight() < minY) { // Scrolling up
          if (y <= minY) {
            // Restore original position.
            $bar.css({
              'position': 'absolute',
              'top': initialPosTop
            });

            $bar.show(function() {
              jQuery.scrollupbar.isInViewport = true;
              jQuery.scrollupbar.isFullyInViewport = true;
              options.enterViewport();
              options.fullyEnterViewport();
            });
          } else {
            $bar.css({
              'position': 'fixed',
              'top': 0
            });

            jQuery.scrollupbar.isInViewport = true;
            options.enterViewport();

            $bar.slideDown(function() {
              jQuery.scrollupbar.isFullyInViewport = true;
              options.fullyEnterViewport();
            });
          }
        } else if (y > lastY) { // Scrolling down
          jQuery.scrollupbar.isFullyInViewport = false;
          options.partiallyExitViewport();

          $bar.slideUp(function() {
            jQuery.scrollupbar.isInViewport = false;
            options.exitViewport();
          });
        }

        lastY = y;
      });
    }

	_destroyFn = function() {
		// Unbind all listeners added by scrollupbar plugin
		$window.off('.scrollupbar');

		// Restore original bar position.
		$bar.css({
			'position': 'absolute',
			'top': initialPosTop
		});
	};

	return $bar;
	};

	jQuery.scrollupbar.destroy = function() {
		if (_destroyFn) {
			return _destroyFn();
		}
	};

	jQuery.fn.scrollupbar = function(options) {
		return jQuery.scrollupbar(this, options);
	};
})(jQuery);
